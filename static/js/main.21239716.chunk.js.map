{"version":3,"sources":["components/RandomQuoteMachineComponents.js","helpers/random.js","helpers/randomColor.js","components/RandomQuoteMachine.js","reportWebVitals.js","index.js"],"names":["RandomQuoteMachineComponent","props","id","className","style","background","text","author","onClick","handleClick","handleKeyboard","href","target","rel","random","max","min","Math","floor","randomColor","h","RandomQuoteMachine","useState","setText","setAuthor","setBackground","useEffect","handleQuotes","RandomQuoteBySpace","handleKeys","onKeyEvent","key","e","fetch","then","response","json","quoteData","index","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA2CeA,MAvCf,SAAqCC,GACjC,OACI,sBACIC,GAAG,YACHC,UAAU,6FACVC,MAAO,CAAEC,WAAYJ,EAAMI,YAH/B,UAKI,4BACIH,GAAG,OACHC,UAAU,2BAFd,SAGKF,EAAMK,OAEX,sBACIJ,GAAG,SACHC,UAAU,wBAFd,SAGKF,EAAMM,SAEX,sBAAKJ,UAAU,8BAAf,UACI,yBACID,GAAG,YACHC,UAAU,2DACVK,QAASP,EAAMQ,YAHnB,UAKI,cAAC,IAAD,IALJ,IAKiB,uBAAMN,UAAU,kBAAhB,uBAA6CF,EAAMS,qBAEpE,oBACIR,GAAG,cACHC,UAAU,yDACVQ,KAAK,mCACLC,OAAO,SACPC,IAAI,sBALR,UAOI,cAAC,IAAD,IAPJ,IAOkB,sBAAMV,UAAU,kBAAhB,6B,gBCjCnBW,MAHf,SAAgBC,EAAKC,GACjB,OAAOC,KAAKC,MAAMD,KAAKH,UAAYC,EAAMC,EAAM,GAAKA,ICSzCG,MARf,WACI,IAAMC,EAAIN,EAAO,EAAG,KAIpB,MADS,cAAUM,EAAV,aAFC,GAED,cADC,GACD,OCyCEC,MAzCf,WAEI,MAAwBC,mBAAS,IAAjC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOf,EAAP,KAAeiB,EAAf,KACA,EAAoCF,mBAAS,IAA7C,mBAAOjB,EAAP,KAAmBoB,EAAnB,KAEAC,qBAAW,WACPC,MACD,IAEH,IAAMC,EAAqB,kBACvB,cAAC,IAAD,CACIC,WAAY,CAAC,QAAS,SACtBC,WAAY,SAACC,EAAKC,GAAN,OAAYL,QAI1BA,EAAe,WACjBM,MAAM,+BACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMC,EAAQxB,EAAO,EAAGuB,EAAUE,OAAS,GAC3ChB,GAAQ,SAAAjB,GAAI,OAAI+B,EAAUC,GAAOhC,QACjCkB,GAAU,SAAAjB,GAAM,OAA+B,MAA3B8B,EAAUC,GAAO/B,OAAiB,UAAY8B,EAAUC,GAAO/B,UACnFkB,GAAc,SAAApB,GAAU,OAAIc,WAIxC,OAEI,cAAC,EAAD,CACIb,KAAMA,EACNC,OAAQA,EACRF,WAAYA,EACZI,YAAa,kBAAMkB,KACnBjB,eAAgB,cAACkB,EAAD,OC7BbY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.21239716.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { FaTwitter } from \"react-icons/fa\"\r\nimport { FaRandom } from \"react-icons/fa\"\r\n\r\nfunction RandomQuoteMachineComponent(props) {\r\n    return (\r\n        <div\r\n            id=\"quote-box\"\r\n            className=\"vw-100 vh-100 d-flex flex-column justify-content-center align-items-center text-center p-4\"\r\n            style={{ background: props.background }}\r\n        >\r\n            <blockquote\r\n                id=\"text\"\r\n                className=\"display-5 text-white p-4\">\r\n                {props.text}\r\n            </blockquote>\r\n            <span\r\n                id=\"author\"\r\n                className=\"text-light fst-italic\">\r\n                {props.author}\r\n            </span>\r\n            <div className=\"fixed-bottom text-light p-4\">\r\n                <button\r\n                    id=\"new-quote\"\r\n                    className=\"btn btn-danger text-light text-uppercase fw-bold p-4 m-1\"\r\n                    onClick={props.handleClick}\r\n                >\r\n                    <FaRandom /> <span className=\"visually-hidden\">Randomize {props.handleKeyboard}</span>\r\n                </button>\r\n                <a\r\n                    id=\"tweet-quote\"\r\n                    className=\"btn btn-info text-light text-uppercase fw-bold p-4 m-1\"\r\n                    href=\"https://twitter.com/intent/tweet\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    <FaTwitter /> <span className=\"visually-hidden\">Tweet</span>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomQuoteMachineComponent","function random(max, min) { \r\n    return Math.floor(Math.random() * (max - min + 1) + min) \r\n}\r\nexport default random","import random from \"./random\"\r\n\r\nfunction randomColor() {\r\n    const h = random(0, 360)\r\n    const s = 20\r\n    const l = 60\r\n    const hsl = `hsl(${h}, ${s}%, ${l}%)`\r\n    return hsl\r\n}\r\n\r\nexport default randomColor","import React, {useState, useEffect} from \"react\"\r\nimport RandomQuoteMachineComponent from \"./RandomQuoteMachineComponents\";\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\nimport random from \"../helpers/random\";\r\nimport randomColor from \"../helpers/randomColor\";\r\n\r\nfunction RandomQuoteMachine() {\r\n\r\n    const [text, setText] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n    const [background, setBackground] = useState(\"\")\r\n\r\n    useEffect( () => {\r\n        handleQuotes()\r\n    }, [] )\r\n    \r\n    const RandomQuoteBySpace = () => (\r\n        <KeyboardEventHandler\r\n            handleKeys={['space', 'enter']}\r\n            onKeyEvent={(key, e) => handleQuotes()}\r\n        />\r\n    )\r\n\r\n    const handleQuotes = () => {\r\n        fetch(\"https://type.fit/api/quotes\")\r\n            .then(response => response.json())\r\n            .then(quoteData => {\r\n                const index = random(0, quoteData.length - 1)\r\n                setText(text => quoteData[index].text)\r\n                setAuthor(author => quoteData[index].author == null ? \"Unknown\" : quoteData[index].author)\r\n                setBackground(background => randomColor())\r\n            }) \r\n    }\r\n\r\n    return (\r\n\r\n        <RandomQuoteMachineComponent \r\n            text={text}\r\n            author={author}\r\n            background={background}\r\n            handleClick={() => handleQuotes()}\r\n            handleKeyboard={<RandomQuoteBySpace />}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default RandomQuoteMachine","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RandomQuoteMachine from './components/RandomQuoteMachine';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuoteMachine />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}